version: 2
jobs:
  # build is for testing
  rails_build:
    docker:
      - image: circleci/ruby:2.5.3-node-browsers
      # need db to run tests
      - image: circleci/postgres:9.6
        environment:
          POSTGRES_USER: postgres

    working_directory: ~/repo

    steps:
      # checks out code from git repo
      - checkout
      # Creates a remote Docker environment configured to execute Docker commands
      - setup_remote_docker

      - run:
          name: Update Bundler Version
          command: |
            gem install bundler -v 2.0.1

      # Download and cache dependencies. Reduce run time.
      - restore_cache:
          keys:
          - v4-dependencies-{{ checksum "rails-app/Gemfile.lock" }}
          - v4-dependencies-

      # install all dependencies for the project
      - run:
          name: make sure yarn is up to date
          command: |
            yarn install

      # jobs: Install gems using parallel workers.
      # retry: Retry network and git requests that have failed
      # path: path for installations
      - run:
          name: install dependencies
          command: |
            bundle install --jobs=4 --retry=3 --path vendor/bundle
          working_directory: rails-app

      - save_cache:
          paths:
            - rails-app/vendor/bundle
          key: v4-dependencies-{{ checksum "rails-app/Gemfile.lock" }}

      - run:
          name: copy sample database
          command: |
            cp config/database.yml.sample config/database.yml
          working_directory: rails-app

      - run:
          name: create database
          command: bundle exec rake db:create
          working_directory: rails-app

      # db:schema:load Loads the schema into the current environmentâ€™s database.
      - run:
          name: load schema
          command: bundle exec rake db:schema:load
          working_directory: rails-app

      - run:
          name: run tests
          command: |
            bundle exec rspec spec
          working_directory: rails-app

      # Collect and Save Reports
      - store_test_results:
          path: rails-app/tmp/test-results
      - store_artifacts:
          path: rails-app/tmp/test-results
          destination: test-results


  react_build:
    docker:
      - image: circleci/node:latest
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker

      - restore_cache:
          keys:
            - react1-dependencies-{{ checksum "react-app/package.json" }}
            - react1-dependencies-

      - run:
          name: Install Dependencies
          command: |
            npm install
          working_directory: react-app

      - save_cache:
          paths:
            - react-app/node_modules
          key: react1-dependencies-{{ checksum "react-app/package.json" }}

      - run:
          name: Run Tests
          command: |
            npm run start |
            npm run s-test
          working_directory: react-app


  react_push_to_docker_hub:
    docker:
      - image: circleci/node:jessie-browsers
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker

      - restore_cache:
          keys:
            - react1-dependencies-{{ checksum "react-app/package.json" }}
            - react1-dependencies-

      - run:
          name: Install Dependencies
          command: |
            npm install

      - save_cache:
          paths:
            - react-app/node_modules
          key: react1-dependencies-{{ checksum "react-app/package.json" }}

      - run:
          name: Build Application Docker Image
          command: |
            docker build -t react-app .
          working_directory: react-app

      - deploy:
          name: Push application Docker image to Dockerhub
          command: |
            docker login -u $DOCKER_HUB_USER_ID -p $DOCKER_HUB_PWD
            docker tag react-app $DOCKER_HUB_USER_ID/$DOCKER_HUB_REPO-react:$CIRCLE_SHA1
            docker tag react-app $DOCKER_HUB_USER_ID/$DOCKER_HUB_REPO-react:latest
            docker push $DOCKER_HUB_USER_ID/$DOCKER_HUB_REPO-react:$CIRCLE_SHA1
            docker push $DOCKER_HUB_USER_ID/$DOCKER_HUB_REPO-react:latest


  rails_push_to_docker_hub:
    docker:
      - image: circleci/ruby:2.5.3-node-browsers
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker

      - run:
          name: Update Bundler Version
          command: |
            gem install bundler -v 2.0.1

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v4-dependencies-{{ checksum "rails-app/Gemfile.lock" }}
          - v4-dependencies-

      - run:
          name: make sure yarn is up to date
          command: |
            yarn install

      - run:
          name: install dependencies
          command: |
            bundle install --jobs=4 --retry=3 --path vendor/bundle
          working_directory: rails-app

      - save_cache:
          paths:
            - rails-app/vendor/bundle
          key: v4-dependencies-{{ checksum "rails-app/Gemfile.lock" }}

      - restore_cache:
          keys:
            - v4-{{ .Branch }}
          paths:
            - /tmp/caches/app.tar

      # Run Docker Commands
      # Use the root working_directory => ~/repo
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /tmp/caches/app.tar | true

      - run:
          name: Build application Docker image
          command: |
            docker build --cache-from=app -t app .
          working_directory: rails-app

      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /tmp/caches
            docker save -o /tmp/caches/app.tar app

      - save_cache:
          key: v4-{{ .Branch }}-{{ epoch }}
          paths:
            - /tmp/caches/app.tar


      # Environment variables found in circleci
      - deploy:
          name: Push application Docker image to Dockerhub
          command: |
            docker login -u $DOCKER_HUB_USER_ID -p $DOCKER_HUB_PWD
            docker tag app $DOCKER_HUB_USER_ID/$DOCKER_HUB_REPO-rails:$CIRCLE_SHA1
            docker tag app $DOCKER_HUB_USER_ID/$DOCKER_HUB_REPO-rails:latest
            docker push $DOCKER_HUB_USER_ID/$DOCKER_HUB_REPO-rails:$CIRCLE_SHA1
            docker push $DOCKER_HUB_USER_ID/$DOCKER_HUB_REPO-rails:latest

  gcp_deploy:
    docker:
      - image: xaviablaza/ruby-cloudsdk
    environment:
      - REACT_PROJECT_NAME: "react-deployment"
      - RAILS_PROJECT_NAME: "rails-deployment"
      - GOOGLE_PROJECT_ID: "se498-01"
      - GOOGLE_COMPUTE_ZONE: "us-central1-a"
      - GOOGLE_CLUSTER_NAME: "staging"
    working_directory: ~/repo
    steps:
      - checkout

      - run:
          name: Setup Google Cloud SDK
          command: |
            apt-get install -qq -y gettext
            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            gcloud --quiet container clusters get-credentials ${GOOGLE_CLUSTER_NAME}
            gcloud --quiet components install kubectl

      - setup_remote_docker

      - run:
          name: install kubernetes-deploy
          command: |
            gem install kubernetes-deploy

      - run:
          name: Deploy to Kubernetes
          command: |
            KUBECONFIG=~/.kube/config ENVIRONMENT=staging REVISION=$CIRCLE_SHA1 GOOGLE_APPLICATION_CREDENTIALS=$GCLOUD_SERVICE_KEY kubernetes-deploy se498-staging gke_se498-01_us-central1-a_staging

workflows:
  version: 2
  build-push:
    jobs:
      - rails_build
      - react_build
      - react_push_to_docker_hub:
          requires:
            - react_build
          filters:
            branches:
              only:
                - master
      - rails_push_to_docker_hub:
          requires:
            - rails_build
          filters:
            branches:
              only:
                - master
      - gcp_deploy:
          requires:
            - react_push_to_docker_hub
            - rails_push_to_docker_hub
          filters:
            branches:
              only:
                - master
